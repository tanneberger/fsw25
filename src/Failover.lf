target uC

preamble {=
    #include "common.h"

    #define ASSUME_DEAD MSEC(750)
    typedef struct NeighborInformation NeighborInformation;

    struct NeighborInformation {
        bool federates[3];
    };

=}

reactor Failover(my_id: int = 0, left: int = 1, right: int = 1, offset: interval_t = 100msec) {
    // controll information
    output leader: bool;
    output left_connected: bool;
    output right_connected: bool;
    output forwarding_information: ForwardInformation;

    // neighbor controll
    input left_neighbor_ctrl_in: NeighborInformation;
    input right_neighbor_ctrl_in: NeighborInformation;
    output left_neighbor_ctrl_out: NeighborInformation;
    output right_neighbor_ctrl_out: NeighborInformation;
    
    //state my_id: int = my_id;
    state visibility_table: bool[9];
    state federate_ids: int[3]; //self, left, right
    state last_received: instant_t[2]; // left, right

    timer ping_neighbors(offset, 500msec);
    timer perform_failover(1sec, 500msec);

    reaction (startup) {=
        for (int i = 0; i < 9; i++) {
            self->visibility_table[i] = false;
        }
        self->federate_ids[0] = self->my_id;
        self->federate_ids[1] = self->left;
        self->federate_ids[2] = self->right;

        self->last_received[0] = env->get_physical_time(env);
        self->last_received[1] = env->get_physical_time(env);
    =}

    reaction (ping_neighbors) -> left_neighbor_ctrl_out, right_neighbor_ctrl_out {=
        instant_t current_time = env->get_physical_time(env);

        if (current_time - self->last_received[0] > ASSUME_DEAD) {
            self->visibility_table[self->my_id * 3 + self->left] = false; 
        } else {
            self->visibility_table[self->my_id * 3 + self->left] = true;
        }

        if (current_time - self->last_received[1] > ASSUME_DEAD) {
            self->visibility_table[self->my_id * 3 + self->right] = false; 
        } else {
            self->visibility_table[self->my_id * 3 + self->right] = true;
        }

        self->visibility_table[self->my_id * 3 + self->my_id] = true;

        NeighborInformation neightbor_information;
        memcpy(neightbor_information.federates, 
            &self->visibility_table[self->my_id * 3], 3 * sizeof(bool)); 

        lf_set(left_neighbor_ctrl_out, neightbor_information);
        lf_set(right_neighbor_ctrl_out, neightbor_information);
    =}

    reaction (left_neighbor_ctrl_in) {=
        //printf("MyID: %d message from left (%d)\n", self->my_id, self->left);
        self->last_received[0] = env->get_physical_time(env);

        self->visibility_table[self->left * 3 + 0] = left_neighbor_ctrl_in->value.federates[0];
        self->visibility_table[self->left * 3 + 1] = left_neighbor_ctrl_in->value.federates[1];
        self->visibility_table[self->left * 3 + 2] = left_neighbor_ctrl_in->value.federates[2];
    =}

    reaction (right_neighbor_ctrl_in) {=
        //printf("MyID: %d message from right (%d)\n", self->my_id, self->right);
        self->last_received[1] = env->get_physical_time(env);

        self->visibility_table[self->right * 3 + 0] = right_neighbor_ctrl_in->value.federates[0];
        self->visibility_table[self->right * 3 + 1] = right_neighbor_ctrl_in->value.federates[1];
        self->visibility_table[self->right * 3 + 2] = right_neighbor_ctrl_in->value.federates[2];
    =}

    reaction (perform_failover) -> leader, left_connected, right_connected, forwarding_information {=
        bool online[3];

        //TODO: uncomment when working with 3 federates 
        online[0] = self->visibility_table[1 * 3 + 0] || self->visibility_table[2 * 3 + 0];
        online[1] = self->visibility_table[0 * 3 + 1] || self->visibility_table[2 * 3 + 1];
        online[2] = self->visibility_table[0 * 3 + 2] || self->visibility_table[1 * 3 + 2];

        //online[0] = self->visibility_table[1 * 3 + 0];
        //online[1] = self->visibility_table[0 * 3 + 1];
        //online[2] = false;
        online[self->my_id] = true;

        printf("Federate: %i = %i Left-Side: %i = %i Right-Side: %i = %i\n", self->my_id, online[self->my_id], self->left, online[self->left], self->right, online[self->right]);

        bool is_left_connected = self->visibility_table[self->my_id * 3 + self->left];
        bool is_right_connected = self->visibility_table[self->my_id * 3 + self->right];

        lf_set(left_connected, is_left_connected);
        lf_set(right_connected, is_right_connected);

        int leader_index = -1;

        if (!online[0] && online[1] && online[2]) {
            leader_index = 1;
        } else {
            leader_index = 0;
        }

        printf("MyID: %i Leader Calculated: %i\n", self->my_id, leader_index);

        if (leader_index == self->my_id) {
            lf_set(leader, true);
            lf_set(forwarding_information, ForwardSelf);
            return;
        } else if (leader_index == self->left) {
            if (left_connected) {
                lf_set(forwarding_information, ForwardLeft);
            } else {
                lf_set(forwarding_information, ForwardRight);
            }
        } else if (leader_index == self->right) {
            if (right_connected) {
                lf_set(forwarding_information, ForwardRight);
            } else {
                lf_set(forwarding_information, ForwardLeft);
            }
        }
    =}
}