target uC;


preamble {=
    #include "common.h"

    /*#ifndef FORWARD_ENUM
    #define FORWARD_ENUM 
    const char* print_forward_enum(ForwardInformation forward) {
        switch (forward) {
            case ForwardSelf: 
                return "self";
            case ForwardLeft: 
                return "left";
            case ForwardRight:
                return "right";
        }
    }
    #endif*/
=}

reactor Forwarder {
    input forwarding_information_in: ForwardInformation;

    input left_neighbor_data_in: FederatedData;
    input right_neighbor_data_in: FederatedData;
    input self_data_in: FederatedData;

    output left_neighbor_data_out: FederatedData;
    output right_neighbor_data_out: FederatedData;
    output self_data_out: FederatedData;

    state forwarding_information: ForwardInformation;

    reaction(startup) {=
        self->forwarding_information = ForwardSelf;
    =}

    reaction(forwarding_information_in) {=
        const char* direction = NULL;
        switch (forwarding_information_in->value) {
            case ForwardSelf: 
                direction = "self";
                break;
            case ForwardLeft: 
                direction = "left";
                break;
            case ForwardRight:
                direction = "right";
                break;
        }
        printf("Forwarder Received: %s\n", direction);
        self->forwarding_information = forwarding_information_in->value;
    =}

    reaction (left_neighbor_data_in) -> left_neighbor_data_out, right_neighbor_data_out, self_data_out {=
        switch (self->forwarding_information) {
            case ForwardLeft:
                lf_set(left_neighbor_data_out, left_neighbor_data_in->value);
                break;
            case ForwardRight:
                lf_set(right_neighbor_data_out, left_neighbor_data_in->value);
                break;
            case ForwardSelf:
                lf_set(self_data_out, left_neighbor_data_in->value);
                break;
        }
    =}

    reaction (right_neighbor_data_in) -> left_neighbor_data_out, right_neighbor_data_out, self_data_out {= 
        switch (self->forwarding_information) {
            case ForwardLeft:
                lf_set(left_neighbor_data_out, right_neighbor_data_in->value);
                break;
            case ForwardRight:
                lf_set(right_neighbor_data_out, right_neighbor_data_in->value);
                break;
            case ForwardSelf:
                lf_set(self_data_out, right_neighbor_data_in->value);
                break;
        }
    =}

    reaction (self_data_in) -> left_neighbor_data_out, right_neighbor_data_out, self_data_out  {=
        switch (self->forwarding_information) {
            case ForwardLeft:
                lf_set(left_neighbor_data_out, self_data_in->value);
                break;
            case ForwardRight:
                lf_set(right_neighbor_data_out, self_data_in->value);
                break;
            case ForwardSelf:
                lf_set(self_data_out, self_data_in->value);
                break;
        }
    =}
}